import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';
import ToDoForm from './AddTask';
import ToDo from './Task';

const TASKS_STORAGE_KEY = 'tasks-list-project-web';
const DEFAULT_CITY = {
  name: "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ",
  latitude: 45.0355,
  longitude: 38.9753
};

function App() {
  const [rates, setRates] = useState({});
  const [weatherData, setWeatherData] = useState(null);
  const [todos, setTodos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –ø–æ–≥–æ–¥—ã –≤ —Ç–µ–∫—Å—Ç
  const getWeatherCondition = (code) => {
    const conditions = {
      0: '–Ø—Å–Ω–æ',
      1: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ',
      2: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
      3: '–ü–∞—Å–º—É—Ä–Ω–æ',
      45: '–¢—É–º–∞–Ω',
      51: '–õ–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å',
      53: '–£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å',
      55: '–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å',
      61: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
      63: '–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',
      65: '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
      80: '–õ–∏–≤–µ–Ω—å',
      81: '–°–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å',
      82: '–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å'
    };
    return conditions[code] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  };

  useEffect(() => {
    async function fetchAllData() {
      try {
        // –í–∞–ª—é—Ç—ã
        const currency = await axios.get('https://www.cbr-xml-daily.ru/daily_json.js');
        const { USD, EUR } = currency.data.Valute;

        setRates({
          USDrate: USD.Value.toFixed(2).replace('.', ','),
          EURrate: EUR.Value.toFixed(2).replace('.', ',')
        });

        // –ü–æ–≥–æ–¥–∞ –¥–ª—è –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞
        const weatherRes = await axios.get(
          `https://api.open-meteo.com/v1/forecast?latitude=${DEFAULT_CITY.latitude}&longitude=${DEFAULT_CITY.longitude}&current_weather=true`
        );

        setWeatherData({
          temp: weatherRes.data.current_weather.temperature,
          wind_speed: weatherRes.data.current_weather.windspeed,
          condition: getWeatherCondition(weatherRes.data.current_weather.weathercode)
        });

      } catch (err) {
        console.error(err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      } finally {
        setLoading(false);
      }
    }

    fetchAllData();
  }, []);

  // –ó–∞–¥–∞—á–∏: –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  useEffect(() => {
    const stored = localStorage.getItem(TASKS_STORAGE_KEY);
    if (stored) {
      try {
        setTodos(JSON.parse(stored));
      } catch {
        console.warn('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ localStorage');
      }
    }
  }, []);

  useEffect(() => {
    localStorage.setItem(TASKS_STORAGE_KEY, JSON.stringify(todos));
  }, [todos]);

  const addTask = (task) => {
    if (task.trim()) {
      setTodos([...todos, { id: crypto.randomUUID(), task, complete: false }]);
    }
  };

  const removeTask = (id) => {
    setTodos(todos.filter(todo => todo.id !== id));
  };

  const toggleTask = (id) => {
    setTodos(todos.map(todo =>
      todo.id === id ? { ...todo, complete: !todo.complete } : todo
    ));
  };

  return (
    <div className="App">
      {loading && <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
      {!loading && error && <p style={{ color: 'red' }}>{error}</p>}

      {!loading && !error && (
        <>
          <div className="info">
            <div className="money">
              <div>–î–æ–ª–ª–∞—Ä –°–®–ê $ ‚Äî {rates.USDrate} —Ä—É–±.</div>
              <div>–ï–≤—Ä–æ ‚Ç¨ ‚Äî {rates.EURrate} —Ä—É–±.</div>
            </div>

            {weatherData && (
              <div className="weather-info">
                <h3>–ü–æ–≥–æ–¥–∞ –≤: {DEFAULT_CITY.name}</h3>
                <div>
                  üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weatherData.temp}¬∞C<br />
                  üí® –í–µ—Ç–µ—Ä: {weatherData.wind_speed} –º/—Å<br />
                  ‚òÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {weatherData.condition}
                </div>
              </div>
            )}
          </div>

          <header>
            <h1 className="list-header">–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á: {todos.length}</h1>
          </header>
          <ToDoForm addTask={addTask} />
          {todos.map(todo => (
            <ToDo key={todo.id} todo={todo} toggleTask={toggleTask} removeTask={removeTask} />
          ))}
        </>
      )}
    </div>
  );
}

export default App;
